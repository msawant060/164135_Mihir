Insert Documents
//to insert d=many documents into colletion movies
db.movies.insert([

{title:'Fight Club',
	writer:'Chuk Palahnuik',
	year:1999,
	actors:['Brad Pitt','Edward Norton'] },
	
{title : 'Pulp Fiction',
    writer :' Quentin Tarantino',
    year: 1994,
    actors:[ 'John Travolta', 'Uma Thurman']},
   
{title: 'Inglorious basterds',
    writer: 'Quentin Tarantino',
    year : 2009, 
    actors: ['Brad Pitt', 'Diane Kruger', 'Eli Roth']},

{title: 'The Hobbit : An Expected Journey',
    writer: 'J.R.R.Tolkein',
    year:2012,
    franchise:'The hobbit'},

{title : 'The Hobbit: The Desolation of Smaug',
	writer : 'J.R.R. Tolkein',
	year : 2013,
	franchise : 'The Hobbit'},
   
{title:'The Hobbit :The Battle of the Five Armies',
    writer:'J.R.R.Tolkein',
    year:2012,
    franchise:'The Hobbit',
    synopsis:'Bilbo and Company are forced to engine in war against an array of combantants and keep the Lonely Mountain from falling into the hands of rising darkness'},
    
{title:'Pee Wee Hermans Big Adventure'},

{title:'Avatar'}])


Query / Find Documents
//1.to get all documents 
db.getCollection('movies').find()

//2.get all documents with writer set to "Quentin Tarantino"
db.movies.find({"writer":"Quentin Tarantino"}).pretty()

//3.get all documents where actors include "Brad Pitt"
db.movies.find({"actors":"Brad Pitt"})

//4.get all documents with franchise set to "The Hobbit"
db.movies.find({"franchise":"The Hobbit"})

//5.get all movies released in the 90s
db.movies.find(
{$and:[
    {"year":{$gt:1900}},
    {"year":{$lt:2000}}
    ]
 })

//6.get all movies released before the year 2000 or after 2010
db.movies.find(
{$or:[
    {"year":{$gt:2010}},
    {"year":{$lt:2000}}
    ]
 })

 
 Update Documents
//1.add a synopsis to "The Hobbit: An Unexpected Journey"
db.movies.update({_id:ObjectId("5c2480835118a02cce7c308a")},
	{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home 
	and the gold within it from the dragon Smaug."}})
	
//2.add a synopsis to "The Hobbit: The Desolation of Smaug" :
db.movies.update({title:"The Hobbit: The Desolation of Smaug"},
{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug.
 Bilbo Baggins is in possession of a mysterious and magical ring."}})
 
//3.add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
db.movies.update({title:"Pulp Fiction"},
{$addToSet:{actors:"Samuel L. Jackson"}})

Text Search
//1.find all movies that have a synopsis that contains the word "Bilbo"
db.movies.ensureIndex(
{
    synopsis:"text"
}
)

db.movies.find(
{
    $text:{
       $search:"Bilbo" 
    }
}
)

//2.find all movies that have a synopsis that contains the word "Gandalf"
db.movies.ensureIndex(
{
    synopsis:"text"
}
)

db.movies.find(
{
    $text:{
       $search:"Gandalf" 
    }
}
)

//3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
db.movies.ensureIndex(
{
    synopsis:"text"
}
)

db.movies.find(
{
    $text:{
       $search:"Bilbo -Gandalf"   
        }
}
)

//4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
db.movies.ensureIndex(
{
    synopsis:"text"
}
)

db.movies.find(
{
    $text:{
       $search:"dwarves hobbit"   
        }
}
)

//5.find all movies that have a synopsis that contains the word "gold" and "dragon"
db.movies.ensureIndex(
{
    synopsis:"text"
}
)

db.movies.find(
{
    $text:{
       $search:'"gold" "dragon"'   
        }
}
)

Delete
//1.delete the movie "Pee Wee Herman's Big Adventure"
db.movies.remove({title:"Pee Wee Hermans Big Adventure"})

//2.delete the movie "Avatar"
db.movies.remove({title:"Avatar"})

Relationship
//users collection
db.users.insert(
{
    username : "GoodGuyGreg",
    first_name : "Good Guy",
    last_name : "Greg",
    username : "ScumbagSteve",
    full_name : [{
        first : "Scumbag", 
        last : "Steve"}]
}
)

//Insert the following documents into a posts collection
db.posts.insert([
{
    username : "GoodGuyGreg",
    title : "Passes out at party",
    body : "Wakes up early and cleans house"
},

{
    username : "GoodGuyGreg",
    title : "Steals your identity",
    body : "Raises your credit score"
},

{  
    username : "GoodGuyGreg",
    title : "Reports a bug in your code",
    body : "Sends you a Pull Request"},
   
{
     username : "ScumbagSteve",
     title : "Borrows something",
    body : "Sells it"},
   
{
    username : "ScumbagSteve",
    title : "Borrows everything",
    body : "The end"},

{
       username : "ScumbagSteve",
    title : "Forks your repo on github",
    body : "Sets to private"
}
])

//Inserting documents into comments colle collections
db.comments.insert([

{
    username : "GoodGuyGreg",
    comment : "Hope you got a good deal!",
    post :ObjectId("5c24b6315118a02cce7c3099") },

{
    username : "GoodGuyGreg",
    comment : "What's mine is yours!",
    post :ObjectId("5c24b6315118a02cce7c309a")
},

{
    username : "GoodGuyGreg",
    comment : "Don't violate the licensing agreement!",
    post : ObjectId("5c24b6315118a02cce7c309b")
},

{
   username : "ScumbagSteve",
    comment : "It still isn't clean",
    post :  ObjectId("5c24b6315118a02cce7c3096")
},

{
 username : "ScumbagSteve",
    comment : "Denied your PR cause I found a hack",
    post : ObjectId("5c24b6315118a02cce7c3098")
}

])

Querying related collections
//1.find all users
db.getCollection('users').find({})

//2.find all posts
db.getCollection('posts').find({})

//3.find all posts that was authored by "GoodGuyGreg"
db.posts.find({username:"GoodGuyGreg"})

//4. find all posts that was authored by "ScumbagSteve"
db.posts.find({username:"ScumbagSteve"})

//5. find all comments
db.getCollection('comments').find({})

//6. find all comments that was authored by "GoodGuyGreg"
db.comments.find({username:"GoodGuyGreg"})

//7. find all comments that was authored by "ScumbagSteve"
db.comments.find({username:"ScumbagSteve"})

//8. find all comments belonging to the post "Reports a bug in your code"
db.comments.find({post:ObjectId("5c24b6315118a02cce7c3098")})